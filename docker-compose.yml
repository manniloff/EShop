version: '3'
services:
  db-core:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: eshop-core
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

  db-payment:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: eshop-payment
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

  db-shipment:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: eshop-shipment
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - backend

    ## Eureka Server
  discovery-server:
    build:
      context: Discovery
      dockerfile: Dockerfile
    container_name: discovery-server
    restart: unless-stopped
    ports:
      - 8761:8761
    networks:
      - backend
    depends_on:
      - zipkin

  gateway-service:
    build:
      context: Gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    restart: unless-stopped
    depends_on:
      - zipkin
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    ports:
      - "3333:3333"
    expose:
      - "3333"

  ## Core-Service Docker Compose Config
  core-service:
    build:
      context: Core
      dockerfile: Dockerfile
    ports:
      - 3340:3340
    container_name: core-service
    restart: unless-stopped
    depends_on:
      - zipkin
      - db-core
      - discovery-server
      - gateway-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend

  ## Payment-Service Docker Compose Config
  payment-service:
    build:
      context: Payment
      dockerfile: Dockerfile
    ports:
      - 3360:3360
    container_name: payment-service
    restart: unless-stopped
    depends_on:
      - zipkin
      - db-payment
      - discovery-server
      - gateway-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend

  ## Shipment-Service Docker Compose Config
  shipment-service:
    build:
      context: Shipment
      dockerfile: Dockerfile
    ports:
      - 3370:3370
    container_name: shipment-service
    restart: unless-stopped
    depends_on:
      - zipkin
      - db-shipment
      - discovery-server
      - gateway-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - gateway-service
      - core-service
      - payment-service
      - shipment-service
    networks:
      - backend

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - backend

volumes:
  db-data:
networks:
  backend:
